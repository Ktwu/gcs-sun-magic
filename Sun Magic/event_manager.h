#pragma once

#include "stdafx.h"
#include "events.h"
#include "game_object.h"

#include <hash_map>
#include <hash_set>

namespace SunMagic {

	typedef std::hash_set<void (*)(Event*)> CallbackSet;
	typedef std::hash_map<GameObject*, CallbackSet*> FocusToCallbackSetMap;
	typedef std::pair<GameObject*, CallbackSet*> FocusToCallbackSetPair;
	typedef std::hash_map<Event::EventType, FocusToCallbackSetMap*> EventToFocusToCallbackSetMap;

	class EventManager {
	public:
		EventManager(sf::RenderWindow *window);
		~EventManager();

		void RegisterCallback(Event::EventType type, void (*callback)(Event*), GameObject *focus = NULL);

		bool RemoveCallback(Event::EventType type, void (*callback)(Event*), GameObject *focus = NULL);

		void ClearCallbacks();

		void AddEvent(Event event);

		void HandleInput(); // Handle all events generated by the render window

		void Update(float time); // Propagate events to listeners

	protected:
		void UpdateFocus(sf::Vector2i mouse);

		sf::RenderWindow *_window;
		// Map of callbacks registered for each focus object for each event type
		EventToFocusToCallbackSetMap _event_focus_callback_map;
		std::vector<Event> _events;
		std::hash_set<GameObject *> _focus_objects;	// Set of all objects that can be focused
		GameObject *_focus;						// Currently focused object
	};

}